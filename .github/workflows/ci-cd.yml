name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run linting
      run: uv run ruff check . --output-format=github

    - name: Run formatting check
      run: uv run ruff format --check .

    - name: Run type checking
      run: uv run mypy src/

    - name: Run tests
      run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        MONGODB_URL: mongodb://localhost:27017
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run security scan
      run: uv run pre-commit run detect-secrets --all-files

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend linting
      run: npm run lint

    - name: Run frontend tests
      run: npm run test:unit

    - name: Build frontend
      run: npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test, frontend-tests]

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install backend dependencies
      run: uv sync --extra dev

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start backend server
      run: |
        API_PORT=54322 uv run python -m back_office_lmelp.app &
        sleep 10
      env:
        MONGODB_URL: mongodb://localhost:27017
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
      env:
        VITE_API_BASE_URL: http://localhost:54322

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security, frontend-tests, integration-tests]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Test job result: ${{ needs.test.result }}"
        echo "Security job result: ${{ needs.security.result }}"
        echo "Frontend tests job result: ${{ needs.frontend-tests.result }}"
        echo "Integration tests job result: ${{ needs.integration-tests.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Backend tests failed"
          exit 1
        fi

        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "Security scan failed"
          exit 1
        fi

        if [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          echo "Frontend tests failed"
          exit 1
        fi

        if [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "Integration tests failed"
          exit 1
        fi

        echo "All quality gates passed! âœ…"

  deploy-staging:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: quality-gate
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://back-office-lmelp-staging.example.com

    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This is where staging deployment logic would go"
        echo "- Build Docker images"
        echo "- Push to container registry"
        echo "- Update staging deployment"
        echo "- Run smoke tests"

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://back-office-lmelp.example.com

    steps:
    - name: Deploy to production
      run: |
        echo "ðŸŽ¯ Deploying to production environment..."
        echo "This is where production deployment logic would go"
        echo "- Blue-green deployment"
        echo "- Health checks"
        echo "- Rollback capability"
