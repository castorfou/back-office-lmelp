"""Application FastAPI principale."""

import os
import socket
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager, suppress
from typing import Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware

from .models.episode import Episode
from .services.mongodb_service import mongodb_service
from .utils.memory_guard import memory_guard
from .utils.port_discovery import PortDiscovery


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """Gestion du cycle de vie de l'application."""
    try:
        # D√©marrage
        if not mongodb_service.connect():
            raise Exception("Impossible de se connecter √† MongoDB")
        print("Connexion MongoDB √©tablie")

        yield

    except Exception as e:
        print(f"Erreur dans le cycle de vie: {e}")
        raise
    finally:
        # Arr√™t garanti m√™me en cas d'erreur
        try:
            mongodb_service.disconnect()
            print("Connexion MongoDB ferm√©e")
        except Exception as e:
            print(f"Erreur lors de la fermeture: {e}")


app = FastAPI(
    title="Back-office LMELP",
    description="Interface de gestion pour la base de donn√©es du Masque et la Plume",
    version="0.1.0",
    lifespan=lifespan,
)

# Configuration CORS pour le frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:5173",
    ],  # Vue.js dev servers
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root() -> dict[str, str]:
    """Point d'entr√©e de l'API."""
    return {"message": "Back-office LMELP API", "version": "0.1.0"}


@app.get("/api/episodes", response_model=list[dict[str, Any]])
async def get_episodes() -> list[dict[str, Any]]:
    """R√©cup√®re la liste de tous les √©pisodes."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        episodes_data = mongodb_service.get_all_episodes()
        episodes = [Episode(data).to_summary_dict() for data in episodes_data]
        return episodes
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


@app.get("/api/episodes/{episode_id}", response_model=dict[str, Any])
async def get_episode(episode_id: str) -> dict[str, Any]:
    """R√©cup√®re un √©pisode par son ID."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        episode_data = mongodb_service.get_episode_by_id(episode_id)
        if not episode_data:
            raise HTTPException(status_code=404, detail="√âpisode non trouv√©")

        episode = Episode(episode_data)
        return episode.to_dict()
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


@app.put("/api/episodes/{episode_id}")
async def update_episode_description(
    episode_id: str, request: Request
) -> dict[str, str]:
    """Met √† jour la description corrig√©e d'un √©pisode."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        # Lire le body de la requ√™te (text/plain)
        description_corrigee = (await request.body()).decode("utf-8")

        # V√©rifier que l'√©pisode existe
        episode_data = mongodb_service.get_episode_by_id(episode_id)
        if not episode_data:
            raise HTTPException(status_code=404, detail="√âpisode non trouv√©")

        # Mettre √† jour la description
        success = mongodb_service.update_episode_description(
            episode_id, description_corrigee
        )
        if not success:
            raise HTTPException(status_code=400, detail="√âchec de la mise √† jour")

        return {"message": "Description mise √† jour avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


# Variables globales pour la gestion propre du serveur
_server_instance = None


def signal_handler(signum, frame):
    """Gestionnaire de signaux pour arr√™t propre."""
    print(f"\nüõë Signal {signum} re√ßu - Arr√™t en cours...")

    # Arr√™ter le serveur proprement si disponible
    if _server_instance is not None:
        _server_instance.should_exit = True
        print("üì° Signal d'arr√™t envoy√© au serveur")

    # Forcer la fermeture des ressources
    with suppress(Exception):
        mongodb_service.disconnect()
        print("üîå MongoDB d√©connect√©")

    # Nettoyer le fichier de d√©couverte de port
    with suppress(Exception):
        port_file = PortDiscovery.get_port_file_path()
        PortDiscovery.cleanup_port_file(port_file)
        print("üßπ Port discovery file cleaned up")


def find_free_port_or_default() -> int:
    """Find a free port using priority strategy.

    Priority order:
    1. Environment variable API_PORT if specified (current behavior)
    2. Default preferred port 54321 (try first)
    3. Fallback range 54322-54350 (scan for first available)

    Returns:
        Available port number

    Raises:
        ValueError: If environment variable contains invalid port number
        RuntimeError: If no available port is found in the range
    """
    # 1. Check environment variable first
    if "API_PORT" in os.environ:
        api_port_str = os.getenv("API_PORT")
        if api_port_str is None:
            # Should not happen since we checked the key exists, but satisfy mypy
            raise ValueError("API_PORT environment variable is None")
        try:
            return int(api_port_str)
        except (TypeError, ValueError) as e:
            raise ValueError(
                f"Invalid API_PORT environment variable: {api_port_str}"
            ) from e

    # Get the same host that will be used by the server
    host = os.getenv("API_HOST", "0.0.0.0")

    # 2. Try preferred default port 54321
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((host, 54321))
            return 54321
    except OSError:
        # Port 54321 is occupied, continue to fallback range
        pass

    # 3. Scan fallback range 54322-54350 (29 attempts)
    return PortDiscovery.find_available_port(
        start_port=54322, max_attempts=29, host=host
    )


def main():
    """Fonction principale pour d√©marrer le serveur."""
    global _server_instance

    import signal

    import uvicorn

    # Enregistrer les gestionnaires de signaux
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Termination

    host = os.getenv("API_HOST", "0.0.0.0")
    port = find_free_port_or_default()

    # Determine if port was automatically selected
    port_auto_selected = "API_PORT" not in os.environ
    port_message = f"üöÄ D√©marrage du serveur sur {host}:{port}"
    if port_auto_selected:
        port_message += " (port automatiquement s√©lectionn√©)"

    print(port_message)
    print("üõ°Ô∏è Garde-fou m√©moire activ√©")

    # Create port discovery file for frontend
    port_file = PortDiscovery.get_port_file_path()
    PortDiscovery.write_port_info(port, port_file, host)
    print(f"üì° Port discovery file created: {port_file}")

    try:
        # Cr√©er la configuration uvicorn avec des param√®tres pour un arr√™t propre
        config = uvicorn.Config(
            app,
            host=host,
            port=port,
            access_log=False,
            server_header=False,
            date_header=False,
            lifespan="on",
            # Param√®tres pour un arr√™t plus propre
            timeout_keep_alive=5,
            timeout_graceful_shutdown=10,
        )

        # Cr√©er le serveur et le garder en r√©f√©rence globale
        _server_instance = uvicorn.Server(config)

        # D√©marrer le serveur
        _server_instance.run()

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption clavier d√©tect√©e")
    except Exception as e:
        print(f"‚ùå Erreur serveur: {e}")
    finally:
        # Nettoyage final garanti
        print("üßπ Nettoyage final...")
        with suppress(Exception):
            mongodb_service.disconnect()
        with suppress(Exception):
            port_file = PortDiscovery.get_port_file_path()
            PortDiscovery.cleanup_port_file(port_file)
        print("‚úÖ Arr√™t complet")


if __name__ == "__main__":
    main()
