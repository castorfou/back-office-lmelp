"""Application FastAPI principale."""

import os
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager, suppress
from typing import Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware

from .models.episode import Episode
from .services.mongodb_service import mongodb_service
from .utils.memory_guard import memory_guard


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """Gestion du cycle de vie de l'application."""
    try:
        # D√©marrage
        if not mongodb_service.connect():
            raise Exception("Impossible de se connecter √† MongoDB")
        print("Connexion MongoDB √©tablie")

        yield

    except Exception as e:
        print(f"Erreur dans le cycle de vie: {e}")
        raise
    finally:
        # Arr√™t garanti m√™me en cas d'erreur
        try:
            mongodb_service.disconnect()
            print("Connexion MongoDB ferm√©e")
        except Exception as e:
            print(f"Erreur lors de la fermeture: {e}")


app = FastAPI(
    title="Back-office LMELP",
    description="Interface de gestion pour la base de donn√©es du Masque et la Plume",
    version="0.1.0",
    lifespan=lifespan,
)

# Configuration CORS pour le frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:5173",
    ],  # Vue.js dev servers
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root() -> dict[str, str]:
    """Point d'entr√©e de l'API."""
    return {"message": "Back-office LMELP API", "version": "0.1.0"}


@app.get("/api/episodes", response_model=list[dict[str, Any]])
async def get_episodes() -> list[dict[str, Any]]:
    """R√©cup√®re la liste de tous les √©pisodes."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        episodes_data = mongodb_service.get_all_episodes()
        episodes = [Episode(data).to_summary_dict() for data in episodes_data]
        return episodes
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


@app.get("/api/episodes/{episode_id}", response_model=dict[str, Any])
async def get_episode(episode_id: str) -> dict[str, Any]:
    """R√©cup√®re un √©pisode par son ID."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        episode_data = mongodb_service.get_episode_by_id(episode_id)
        if not episode_data:
            raise HTTPException(status_code=404, detail="√âpisode non trouv√©")

        episode = Episode(episode_data)
        return episode.to_dict()
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


@app.put("/api/episodes/{episode_id}")
async def update_episode_description(
    episode_id: str, request: Request
) -> dict[str, str]:
    """Met √† jour la description corrig√©e d'un √©pisode."""
    # V√©rification m√©moire
    memory_check = memory_guard.check_memory_limit()
    if memory_check:
        if "LIMITE M√âMOIRE D√âPASS√âE" in memory_check:
            memory_guard.force_shutdown(memory_check)
        print(f"‚ö†Ô∏è {memory_check}")

    try:
        # Lire le body de la requ√™te (text/plain)
        description_corrigee = (await request.body()).decode("utf-8")

        # V√©rifier que l'√©pisode existe
        episode_data = mongodb_service.get_episode_by_id(episode_id)
        if not episode_data:
            raise HTTPException(status_code=404, detail="√âpisode non trouv√©")

        # Mettre √† jour la description
        success = mongodb_service.update_episode_description(
            episode_id, description_corrigee
        )
        if not success:
            raise HTTPException(status_code=400, detail="√âchec de la mise √† jour")

        return {"message": "Description mise √† jour avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}") from e


if __name__ == "__main__":
    import signal

    import uvicorn

    def signal_handler(signum, frame):
        """Gestionnaire de signaux pour arr√™t propre."""
        print(f"\nüõë Signal {signum} re√ßu - Arr√™t en cours...")
        # Forcer la fermeture des ressources
        with suppress(Exception):
            mongodb_service.disconnect()
        exit(0)

    # Enregistrer les gestionnaires de signaux
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Termination

    host = os.getenv("API_HOST", "0.0.0.0")
    port = int(os.getenv("API_PORT", "8000"))

    print(f"üöÄ D√©marrage du serveur sur {host}:{port}")
    print("üõ°Ô∏è Garde-fou m√©moire activ√©")

    try:
        uvicorn.run(
            app,
            host=host,
            port=port,
            access_log=False,
            server_header=False,
            date_header=False,
            lifespan="on",
        )
    except Exception as e:
        print(f"‚ùå Erreur serveur: {e}")
        # Nettoyage forc√©
        with suppress(Exception):
            mongodb_service.disconnect()
        exit(1)
