[project]
name = "back-office-lmelp"
version = "0.1.0"
description = "un back offic pour gerer la base de donnee du projet https://github.com/castorfou/lmelp"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "back-office-lmelp Team"}
]
keywords = ["data-science", "jupyter", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pymongo>=4.6.0",
    "motor>=3.3.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "fastapi-cors>=0.0.6",
    "openai>=1.0.0",
    "psutil>=5.9.0",
    "httpx>=0.24.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.0.0",
    "thefuzz"
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
    "ruff",
    "mypy",
    "types-psutil",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
    "pymdown-extensions>=10.0.0",
]

[project.urls]
Homepage = "https://github.com/castor_fou/back-office-lmelp"
Documentation = "https://github.com/castor_fou/back-office-lmelp#readme"
Repository = "https://github.com/castor_fou/back-office-lmelp.git"
Issues = "https://github.com/castor_fou/back-office-lmelp/issues"

[project.scripts]
back_office_lmelp_setup = "scripts.setup:main"

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Configuration uv pour la reproductibilité
[dependency-groups]
dev = ["pytest", "types-pyyaml>=6.0.12.20250915"]


# Configuration Ruff - Linter et formateur Python moderne
[tool.ruff.lint]
# Règles activées
extend-select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
    "SIM",    # flake8-simplify
    "RET",    # flake8-return
    "ERA",    # eradicate (commented code)
    "PD",     # pandas-vet
    "NPY",    # numpy-specific rules
]

# Règles ignorées (adaptées Data Science)
ignore = [
    "E501",   # Line too long (black/ruff format s'en occupe)
    "B905",   # zip() sans strict= (Python 3.10+)
    "PD901",  # Avoid `df` as variable name (commun en DS)
    "RET504", # Assign + return -> return direct (parfois moins lisible)
    "RET505", # Unnecessary elif after return
]

[tool.ruff]

# Longueur de ligne (cohérent avec black)
line-length = 88

# Fichiers à exclure
extend-exclude = [
    "data/*",
    "models/*",
    "logs/*",
    ".jupyter/*",
]

# Version Python cible
target-version = "py311"

[tool.ruff.format]
# Style de formatage
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Configuration isort intégrée
known-first-party = ["back_office_lmelp"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pep8-naming]
# Convention de nommage adaptée Data Science
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
# Règles spécifiques par type de fichier
"notebooks/*.py" = ["E402", "F401", "F841"]  # Imports, unused vars OK en notebooks
"scripts/*.py" = ["T201"]                    # print() OK dans les scripts
"tests/*.py" = ["S101", "PLR2004", "N802"]  # assert OK, magic values OK, TDD naming conventions OK en tests

# Configuration MyPy - Vérification de types statique
[tool.mypy]
# Version Python et compatibilité
python_version = "3.11"
platform = "linux"

# Niveau de vérification
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Configuration stricte progressive
disallow_any_generics = false        # Autorisé au début
disallow_untyped_calls = false       # Autorisé au début
disallow_untyped_defs = false        # Autorisé au début
disallow_incomplete_defs = true      # Fonctions partiellement typées interdites
disallow_untyped_decorators = false  # Autorisé au début
disallow_subclassing_any = true
no_implicit_reexport = true

# Gestion des imports
ignore_missing_imports = false
follow_imports = "normal"

# Configuration pour Data Science
[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*",
    "sklearn.*",
    "scipy.*",
    "plotly.*",
    "fastapi.*",
    "uvicorn.*",
    "pymongo.*",
    "bson.*",
    "python_dotenv.*",
    "dotenv",
    "psutil.*",
    "openai.*",
    "aiohttp.*",
    "pydantic.*",
]
ignore_missing_imports = true

# Configuration spéciale pour notebooks
[[tool.mypy.overrides]]
module = "notebooks.*"
ignore_errors = true

# Configuration pour app.py (ignore BaseModel subclassing issue)
[[tool.mypy.overrides]]
module = "back_office_lmelp.app"
disable_error_code = ["misc"]

# Temporary overrides to ignore missing type stubs for optional third-party modules
[[tool.mypy.overrides]]
module = ["yaml", "thefuzz"]
ignore_missing_imports = true

# Configuration tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Configuration pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-v --cov=src --cov-report=term-missing --cov-report=xml"
filterwarnings = [
    "ignore::DeprecationWarning:websockets.legacy.*",
    "ignore::DeprecationWarning:uvicorn.protocols.websockets.*"
]
