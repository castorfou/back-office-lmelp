#!/bin/bash

# Script Claude Code pour d√©tecter automatiquement si le backend doit √™tre relanc√©
# Usage: ./.claude/check-backend-freshness.sh [--max-age-minutes]

set -e

PROJECT_ROOT="/workspaces/back-office-lmelp"
MAX_AGE_MINUTES="${1:-10}"  # Par d√©faut 10 minutes
MAX_AGE_SECONDS=$((MAX_AGE_MINUTES * 60))

echo "üîç V√©rification de la fra√Æcheur du backend..."
echo "üìä Seuil d'obsolescence : ${MAX_AGE_MINUTES} minutes"

# V√©rifier si le backend est actif
BACKEND_INFO=$("$PROJECT_ROOT/.claude/get-backend-info.sh" --all 2>/dev/null)

if [[ $? -ne 0 ]]; then
    echo "‚ùå Aucun backend d√©tect√©"
    echo "üîß Suggestion: ./scripts/start-dev.sh"
    exit 1
fi

# Extraire l'√¢ge en secondes depuis le JSON
AGE_SECONDS=$(echo "$BACKEND_INFO" | grep "Started:" | sed 's/Started: \([0-9]*\)s ago/\1/')

if [[ -z "$AGE_SECONDS" ]] || [[ ! "$AGE_SECONDS" =~ ^[0-9]+$ ]]; then
    echo "‚ö†Ô∏è Impossible de d√©terminer l'√¢ge du backend"
    echo "üìÑ Info backend:"
    echo "$BACKEND_INFO"
    exit 1
fi

AGE_MINUTES=$((AGE_SECONDS / 60))

echo "‚è∞ Backend d√©marr√© il y a: ${AGE_SECONDS}s (${AGE_MINUTES} min)"

# D√©cision automatique
if [[ $AGE_SECONDS -gt $MAX_AGE_SECONDS ]]; then
    echo ""
    echo "üö® BACKEND POTENTIELLEMENT OBSOL√àTE"
    echo "   D√©marr√© il y a ${AGE_MINUTES} minutes (seuil: ${MAX_AGE_MINUTES} min)"
    echo ""
    echo "üí° Apr√®s des modifications du code backend, un red√©marrage est recommand√©:"
    echo "   pkill -f 'python.*back_office_lmelp' && ./scripts/start-dev.sh"
    echo ""
    echo "‚úÖ Si aucune modification r√©cente, le backend est probablement OK"
    exit 2  # Code sp√©cial pour "red√©marrage recommand√©"
else
    echo "‚úÖ Backend r√©cent (${AGE_MINUTES} min) - Probablement √† jour"

    # Afficher l'URL pour Claude Code
    BACKEND_URL=$("$PROJECT_ROOT/.claude/get-backend-info.sh" --url)
    echo "üåê URL backend: $BACKEND_URL"
    echo "üß™ Test API: curl \"$BACKEND_URL/\""
    exit 0
fi
