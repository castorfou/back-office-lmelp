#!/bin/bash
# =============================================================================
# PyFoundry - Configuration de l'environnement de d√©veloppement
# =============================================================================
set -e

PYTHON_VERSION="3.11"

echo "üöÄ Configuration de l'environnement back-office lmelp"
echo "=================================================================="

# Mise √† jour du syst√®me
update_system() {
    echo "Mise √† jour des paquets syst√®me..."
    sudo apt-get update -qq
    sudo apt-get upgrade -y -qq
    echo "Syst√®me mis √† jour"
}

# V√©rification et installation d'uv (priorit√©: devcontainer feature, fallback: installation manuelle)
ensure_uv() {
    echo "V√©rification de uv..."
    if command -v uv &> /dev/null; then
        echo "‚úÖ uv disponible ($(uv --version))"
        return 0
    fi

    echo "‚ùå √âchec d'installation d'uv"
    echo "   V√©rifiez votre connexion Docker/ghcr.io (docker login ghcr.io)"
    exit 1
}

# Cr√©ation de l'environnement Python
create_python_environment() {
    echo "Configuration de l'environnement Python $PYTHON_VERSION ..."

    echo "Cr√©ation de l'environnement virtuel..."
    uv venv .venv --python $PYTHON_VERSION

    source .venv/bin/activate
    echo "Installation des d√©pendances..."
    uv pip install -e .

    if [[ -f "pyproject.toml" ]] && grep -q "\[project.optional-dependencies\]" pyproject.toml; then
        echo "Installation des d√©pendances de d√©veloppement..."
        uv pip install -e ".[dev]"
    fi

    echo "G√©n√©ration du fichier de verrouillage..."
    uv pip freeze > requirements.lock

    echo "Configuration de l'activation automatique..."
    PROJECT_PATH=$(pwd)
    for shell_config in "$HOME/.bashrc" "$HOME/.zshrc"; do
        if [[ -f "$shell_config" ]] && ! grep -q "source $PROJECT_PATH/.venv/bin/activate" "$shell_config"; then
            echo "source $PROJECT_PATH/.venv/bin/activate" >> "$shell_config"
        fi
    done

    echo "Environnement Python configur√©"
}


# Configuration Node.js et npm
setup_node() {
    echo "Configuration Node.js..."

    # V√©rification de l'installation de Node.js
    if command -v node &> /dev/null; then
        echo "‚úÖ Node.js disponible ($(node --version))"
        echo "‚úÖ npm disponible ($(npm --version))"

        # Cr√©ation d'un package.json basique s'il n'existe pas
        if [ ! -f "package.json" ]; then
            echo "Cr√©ation du fichier package.json..."
            cat > package.json << EOF
{
  "name": "back-office-lmelp",
  "version": "1.0.0",
  "description": "un back offic pour gerer la base de donnee du projet https://github.com/castorfou/lmelp",
  "scripts": {
    "dev": "echo 'Add your development scripts here'",
    "build": "echo 'Add your build scripts here'"
  },
  "keywords": ["data-science", "python", "node"],
  "author": "castor_fou",
  "license": "MIT",
  "devDependencies": {}
}
EOF
            echo "‚úÖ package.json cr√©√©"
        fi

        echo "Configuration npm termin√©e"
    else
        echo "‚ö†Ô∏è  Node.js non disponible - v√©rifiez la configuration devcontainer"
    fi
}


# Configuration Git et GitHub
setup_git() {
    echo "Configuration Git..."

    # Initialisation du d√©p√¥t si pas encore fait
    if [ ! -d ".git" ]; then
        echo "Initialisation du d√©p√¥t Git..."
        git init --initial-branch=main

        # Cr√©ation du commit initial
        echo "Cr√©ation du commit initial..."
        git add .
        git commit -m "Initial commit: PyFoundry project setup

Project: back-office lmelp
Template: PyFoundry v0.3
Features: ruff, mypy, pre-commit hooks"
    fi

    # Configuration pre-commit si disponible
    if [ -f ".pre-commit-config.yaml" ]; then
        echo "Configuration des hooks pre-commit..."
        if command -v pre-commit &> /dev/null; then
            echo "Mise √† jour des hooks vers les derni√®res versions..."
            pre-commit autoupdate
            pre-commit install

            echo "Pr√©-installation des environnements pre-commit..."
            # Force l'installation des environnements maintenant pour √©viter les d√©lais futurs
            pre-commit install-hooks

            # Commiter les changements de pre-commit autoupdate + corrections formatage
            if ! git diff --quiet 2>/dev/null || ! git diff --cached --quiet 2>/dev/null; then
                echo "Commit des mises √† jour et corrections pre-commit..."
                git add .pre-commit-config.yaml

                # Correction du formatage par les hooks peut g√©n√©rer des changements
                if ! git commit -m "chore: update pre-commit hooks to latest versions" 2>/dev/null; then
                    # Si le commit √©choue √† cause des hooks, ajouter les corrections
                    echo "Ajout des corrections de formatage..."
                    git add .
                    git commit -m "chore: update pre-commit hooks and fix formatting" || true
                fi
            fi

            echo "‚úÖ Pre-commit hooks install√©s et mis √† jour"
        else
            echo "‚ö†Ô∏è  pre-commit non install√©, ignor√©"
        fi
    fi

    # Configuration du remote GitHub si username fourni
    if [ "castor_fou" != "votre-username" ]; then
        echo "Configuration du remote GitHub..."
        git remote get-url origin >/dev/null 2>&1 || git remote add origin "https://github.com/castor_fou/back-office-lmelp.git"

        # Configuration de l'upstream pour la branche main
        git branch --set-upstream-to=origin/main main 2>/dev/null || true

        # Configuration automatique des upstream pour futures branches (local au projet)
        git config push.autoSetupRemote true

        # Configuration de l'authentification GitHub avec gh CLI
        if command -v gh &> /dev/null; then
            echo "Configuration de l'authentification GitHub..."
            if ! gh auth status &>/dev/null; then
                echo "üîê Authentification GitHub requise pour push/pull"
                echo "Lancement de l'authentification..."
                echo ""
                echo "‚ÑπÔ∏è  Note : Vous devrez appuyer sur Entr√©e pour 'ouvrir' le navigateur."
                echo "   Le navigateur ne s'ouvrira pas (limitation devcontainer connue)."
                echo "   ‚Üí Entrez manuellement l'URL et le code dans votre navigateur host."
                echo ""
                gh auth login --git-protocol https --web

                # Configuration du credential helper apr√®s authentification (local au projet)
                if gh auth status &>/dev/null; then
                    echo "Configuration du credential helper Git..."
                    git config credential.helper ""
                    git config credential."https://github.com".helper "!gh auth git-credential"
                    echo "‚úÖ Credential helper configur√©"
                fi
            else
                echo "‚úÖ D√©j√† authentifi√© sur GitHub"
            fi
        fi

        echo "‚úÖ Remote GitHub configur√©"
    fi

    echo "Configuration Git termin√©e"
}

# Ex√©cution des √©tapes
update_system
ensure_uv
create_python_environment
setup_node
setup_git

echo ""
echo "=================================================================="
echo "‚úÖ Configuration termin√©e !"
echo "D√©p√¥t Git initialis√© avec pre-commit hooks"
echo "Node.js et npm configur√©s pour le d√©veloppement frontend"
echo "Red√©marrez le terminal pour activer l'environnement"
